name: release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux-x64-gnu
          - linux-x64-musl
          - macos-x64
        include:
          - build: linux-x64-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: linux-x64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y --no-install-recommends musl-tools

      - name: Build release binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Strip release binary (unix)
        run: strip "target/${{ matrix.target }}/release/bandwhich"

      - name: Tar release (unix)
        working-directory: ./target/${{ matrix.target }}/release
        run: tar cvfz bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz "bandwhich"

      - name: Upload release archive (unix)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz
          asset_name: bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz
          asset_content_type: application/octet-stream